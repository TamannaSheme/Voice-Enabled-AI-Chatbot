"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $c = require('craydent');
var defaultRegex = /(\[(StoryID|AutomationID)\(['`"][\s\S]*?['`"]\)\][\s\S]*?)+?(test|it|describe)[\s\S]*?\(['`"][\s\S]*?['`"],[\s\S]*?\)/g;
var messageRegex = /[\s\S]*?((test)|(it)|(describe))[\s\S]*?\(['`"]([\s\S]*?)['`"][\s\S]*/;
function process(src, filename, config) {
    var options = {};
    var pkg = $c.include(config.rootDir + "/package.json");
    if (pkg) {
        var reporters = $c.get(pkg, 'jest.reporters') || [];
        for (var i = 0, len = reporters.length; i < len; i++) {
            if (reporters[i][0] == 'jest-testrail/reporter') {
                options = reporters[i][1];
                break;
            }
        }
    }
    var match = $c.tryEval(options.match);
    var regex = $c.isRegExp(match) ? match : defaultRegex;
    var matches = src.match(regex) || [];
    return processMatches(src, matches, options);
}
exports.process = process;
;
function processMatches(src, matches, options) {
    var storyIds = [];
    var automationIds = [];
    var StoryID = function () {
        for (var i = 0, len = arguments.length; i < len; i++) {
            storyIds.push(arguments[i]);
        }
    };
    var AutomationID = function () {
        for (var i = 0, len = arguments.length; i < len; i++) {
            automationIds.push(arguments[i]);
        }
    };
    var reset = "";
    var tags = {};
    var tagMethodStr = "";
    var tagMethods = {};
    var customAnnotations = {};
    if (options.tags) {
        for (var i = 0, len = options.tags.length; i < len; i++) {
            var tag = options.tags[i];
            if (!/^[_a-zA-Z$][_a-zA-Z0-9$]+$/.test(tag)) {
                continue;
            }
            tagMethodStr += "\n            tags." + tag + " = [];\n            tagMethods." + tag + " = function () {\n                for (let i = 0, len = arguments.length; i < len; i++) {\n                    tags." + tag + ".push(arguments[i]);\n                }\n            };";
            reset += "tags." + tag + " = [];";
        }
    }
    tagMethodStr && eval(tagMethodStr);
    for (var i = 0, len = matches.length; i < len; i++) {
        var match = matches[i];
        var attributes = match.match(/(\[[\s\S]*?\])/g);
        for (var j = 0, jlen = attributes.length; j < jlen; j++) {
            var excludeList = { alterSource: 1, process: 1, processMatches: 1 };
            try {
                eval(attributes[j]);
            }
            catch (e) {
                var customMethods = "";
                var attribute = attributes[j];
                var undefinedMatches = attribute.match(/[a-zA-Z0-9$_]+?\(/g);
                for (var k = 0, klen = undefinedMatches.length; k < klen; k++) {
                    var name_1 = $c.strip(undefinedMatches[k].match(/^[_a-zA-Z$][_a-zA-Z0-9$]*?\(/g)[0], '(');
                    if (name_1 && !(name_1 in excludeList)) {
                        excludeList[name_1] = 1;
                        customAnnotations[name_1] = customAnnotations[name_1] || [];
                        customMethods += "\n                        function " + name_1 + " () {\n                            for (let i = 0, len = arguments.length; i < len; i++) {\n                                customAnnotations." + name_1 + ".push(arguments[i]);\n                            }\n                        }";
                    }
                }
                try {
                    eval(customMethods + attributes[j]);
                }
                catch (e) {
                }
                finally {
                    if (options.tags) {
                        try {
                            for (var i_1 = 0, len_1 = options.tags.length; i_1 < len_1; i_1++) {
                                var tag = options.tags[i_1];
                                attribute = attribute.replace(new RegExp(tag + "\\s*?\\(", 'g'), "tagMethods." + tag + "(");
                            }
                            eval(attribute);
                        }
                        catch (e) { }
                    }
                }
            }
        }
        src = alterSource({ src: src, match: match, storyIds: storyIds, automationIds: automationIds, tags: tags, customAnnotations: customAnnotations });
        storyIds = [];
        automationIds = [];
        if (reset) {
            eval(reset);
            customAnnotations = {};
        }
    }
    return src;
}
exports.processMatches = processMatches;
function alterSource(params) {
    var src = params.src, match = params.match, storyIds = params.storyIds, automationIds = params.automationIds, tags = params.tags, customAnnotations = params.customAnnotations;
    var message = match.replace(messageRegex, '$5');
    var rawStoryIds = $c.parseRaw(storyIds);
    var rawAutomationIds = $c.parseRaw(automationIds);
    var rawTags = $c.parseRaw(tags);
    var rawCustom = $c.parseRaw(customAnnotations || {});
    var replacer = "{storyIds:" + rawStoryIds + ",automationIds:" + rawAutomationIds + ",tags:" + rawTags + ",custom:" + rawCustom + "} - " + message;
    var final = match.replace(message, replacer);
    return src.replace(match, final);
}
exports.alterSource = alterSource;
const src = `
[StoryID('sid')]
[AutomationID('aid')]
[CustomTag('ct')]
[CustomTag('ct')]
[CustomTag1('ct'),CustomTag1('ct'),CustomTag2('ct')]
describe('the describe', () => {
    test('test 1', () => {});
    [StoryID('sid1')]
    [AutomationID('aid1')]
    test('test 2', () => {});
    [StoryID('sid2')]
    [AutomationID('aid2')]
    it('test 3', () => {});
});`
const matches = ['[StoryID(\'sid\')]\n[AutomationID(\'aid\')]\n[CustomTag(\'ct\')]\n[CustomTag(\'ct\')]\n[CustomTag1(\'ct\'),CustomTag1(\'ct\'),CustomTag2(\'ct\')]\ndescribe(\'the describe\', ()',
    '[StoryID(\'sid1\')]\n    [AutomationID(\'aid1\')]\n    test(\'test 2\', ()',
    '[StoryID(\'sid2\')]\n    [AutomationID(\'aid2\')]\n    it(\'test 3\', ()']
console.log(processMatches(src, matches, { tags: ["CustomTag", "CustomTag2", "8989"] }))
//# sourceMappingURL=transform.js.map